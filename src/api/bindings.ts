/* eslint-disable */
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

declare global {
    interface Window {
        __TAURI_INVOKE__<T>(cmd: string, args?: Record<string, unknown>): Promise<T>;
    }
}

// Function avoids 'window not defined' in SSR
const invoke = () => window.__TAURI_INVOKE__;

/**
 * 查询节点数量
 */
export function dbCountEndpoints() {
    return invoke()<number>("db_count_endpoints")
}

/**
 * 查询订阅数量
 */
export function dbCountSubscriptions() {
    return invoke()<number>("db_count_subscriptions")
}

/**
 * 获取设置
 */
export function dbGetSettings() {
    return invoke()<Settings>("db_get_settings")
}

/**
 * 插入订阅
 */
export function dbInsertSubscription(doc: Subscription) {
    return invoke()<null>("db_insert_subscription", { doc })
}

/**
 * 插入站点
 */
export function dbInsertWebsite(doc: Website) {
    return invoke()<null>("db_insert_website", { doc })
}

/**
 * 查询节点
 */
export function dbQueryEndpoints() {
    return invoke()<Endpoint[]>("db_query_endpoints")
}

/**
 * 查询流量记录
 */
export function dbQueryFlows() {
    return invoke()<Flow[]>("db_query_flows")
}

/**
 * 查询日志
 */
export function dbQueryLogs() {
    return invoke()<Log[]>("db_query_logs")
}

/**
 * 查询订阅
 */
export function dbQuerySubscriptions() {
    return invoke()<Subscription[]>("db_query_subscriptions")
}

/**
 * 查询站点
 */
export function dbQueryWebsites() {
    return invoke()<Website[]>("db_query_websites")
}

/**
 * 删除订阅
 */
export function dbRemoveSubscription(id: number) {
    return invoke()<null>("db_remove_subscription", { id })
}

/**
 * 删除站点
 */
export function dbRemoveWebsite(id: number) {
    return invoke()<null>("db_remove_website", { id })
}

/**
 * 保存设置
 */
export function dbSetSettings(settings: Settings) {
    return invoke()<null>("db_set_settings", { settings })
}

/**
 * 更新订阅
 */
export function dbUpdateSubscription(doc: Subscription) {
    return invoke()<null>("db_update_subscription", { doc })
}

/**
 * 设置当前节点
 */
export function getCurrentEndpoint() {
    return invoke()<number | null>("get_current_endpoint")
}

/**
 * 给所有节点测速，并选择最快的节点
 */
export function selectFastestEndpoint() {
    return invoke()<number>("select_fastest_endpoint")
}

/**
 * 设置当前节点
 */
export function setCurrentEndpoint(epId: number) {
    return invoke()<null>("set_current_endpoint", { epId })
}

/**
 * 更新单个订阅
 */
export function updateSubscription(subId: number) {
    return invoke()<null>("update_subscription", { subId })
}

/**
 * 更新全部订阅
 */
export function updateSubscriptions() {
    return invoke()<null>("update_subscriptions")
}

/**
 * 获取正在更新的订阅 ID 列表
 */
export function dbGetUpdatingSubscriptionIds() {
    return invoke()<number[]>("db_get_updating_subscription_ids")
}

/**
 * 订阅分组
 */
export type Subscription = { id: number; name: string; url: string; disabled: boolean | null }
/**
 * 设置
 */
export type Settings = { socksPort: number; httpPort: number; allowLan: boolean; subUpdateInterval: number; epTestInterval: number; epTestConcurrency: number; epTestUrl: string; rule: string }
/**
 * 站点
 */
export type Website = { id: number; name: string; url: string }
/**
 * Xray 日志
 */
export type Log = { id: number; log: string }
/**
 * 节点
 */
export type Endpoint = { id: number; subId: number; uri: string; name: string; host: string; port: number; latency: number | null; outbound: string }
/**
 * 流量记录
 */
export type Flow = { id: number; ts: number; download: number; upload: number }
